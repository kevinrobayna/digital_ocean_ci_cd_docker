name: "CI CD pipeline for Digital Ocean using Docker"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - run: go version
      - run: go build *.go

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
         token: ${{ secrets.DO_API_KEY }}

      - name: Publish Image to Container Registry
        uses: ripplr-io/docr-docker-publish@v1
        with:
          image_path: do-kevinrobayna-docker-registry/helloworld

      - name: Generate deploy file
        run: |
          echo '#!/bin/bash
echo ${{ secrets.DO_REGISTRY_PASSWORD }} | docker login registry.digitalocean.com -u ${{ secrets.DO_REGISTRY_USERNAME }} --password-stdin
docker run -d -p 8080:8080 --name helloworld registry.digitalocean.com/do-kevinrobayna-docker-registry/helloworld:latest
curl localhost:8080/api/hello' > deploy.sh

      - name: Provision Droplet and deploy container
        run: | 
          dropletResponse=$(doctl compute droplet create "ci-cd-do-example" --image docker-18-04 --size s-1vcpu-1gb --region lon1 --user-data-file deploy.sh --format "Public IPv4" --wait)
          host=($(echo ${dropletResponse//Public IPv4/} | tr "\n" " "))
          echo "DO_HOST=$host" >> $GITHUB_ENV
      
      - name: Curl from outside of droplet
        run: curl ${{ env.DO_HOST }}:8080/api/hello

      - name: Delete Droplet if there's one
        run: doctl compute droplet delete "ci-cd-do-example" --force
