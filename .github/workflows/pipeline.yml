name: "CI CD pipeline for Digital Ocean using Docker"

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # setup go environment in vm
      - uses: actions/setup-go@v2
      # use go cli
      - run: go version
      - run: go build *.go

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
         token: ${{ secrets.DO_API_KEY }}

      - name: Publish Image to Container Registry
        uses: ripplr-io/docr-docker-publish@v1
        with:
          image_path: do-kevinrobayna-docker-registry/helloworld

      - name: Provision Droplet and deploy container
        run: | 
          sed -i 's/DO_REGISTRY_PASSWORD/${{ secrets.DO_REGISTRY_PASSWORD }}/' install.sh
          sed -i 's/DO_REGISTRY_USERNAME/${{ secrets.DO_REGISTRY_USERNAME }}/' install.sh

          dropletResponse=$(doctl compute droplet create "ci-cd-do-example" --image docker-18-04 --size s-1vcpu-1gb --region lon1 --user-data-file install.sh --format "Public IPv4" --wait)
          host=($(echo ${dropletResponse//Public IPv4/} | tr "\n" " "))
          echo "DO_HOST=$host" >> $GITHUB_ENV
      
      - name: Curl from outside of droplet
        run: curl ${{ env.DO_HOST }}:8080/api/hello

      # - name: Delete Droplet if there's one
      #   run: doctl compute droplet delete "ci-cd-do-example" --force
